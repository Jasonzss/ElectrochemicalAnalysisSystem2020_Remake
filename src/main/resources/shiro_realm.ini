#配置数据库连接信息
dataSource = com.alibaba.druid.pool.DruidDataSource
dataSource.driverClassName = com.mysql.cj.jdbc.Driver
dataSource.url = jdbc:mysql://localhost:3306/eas_re?useSSL=false&useUnicode=true&characterEncoding=UTF-8
dataSource.username = root
dataSource.password = 123456

#凭证验证器（验证密码）
credentialsMatcher = com.bluedot.infrastructure.shiro.RetryLimitHashedCredentialsMatcher
credentialsMatcher.hashAlgorithmName = md5
credentialsMatcher.hashIterations = 1
credentialsMatcher.storedCredentialsHexEncoded = true

#使用shiro自带的Jdbc数据库的Realm
jdbcRealm = org.apache.shiro.realm.jdbc.JdbcRealm
#设置数据库的数据源
jdbcRealm.dataSource = $dataSource

#因为已有数据库字段的名称和jdbcRealm中默认的字段名不一样，所以需要修改一下
#加盐的密码查询
jdbcRealm.saltStyle = COLUMN
jdbcRealm.authenticationQuery = SELECT password, salt from user where email = ?
jdbcRealm.userRolesQuery = SELECT role_name FROM role r LEFT JOIN user_role ur on r.role_id = ur.role_id LEFT JOIN user u on ur.email = u.email WHERE u.email = ?
jdbcRealm.permissionsQuery = SELECT permission_name FROM permission p LEFT JOIN role_permission rp on p.permission_id = rp.permission_id LEFT JOIN role r on rp.role_id = r.role_id WHERE r.role_name = ?
#开启查找权限，否则不会自动查询角色对应的权限。这样会造成实际有权限，调用subject.isPermitted()返回false的情况
jdbcRealm.permissionsLookupEnabled = true
jdbcRealm.credentialsMatcher = $credentialsMatcher

#手动设置realms
securityManager.realms = $jdbcRealm